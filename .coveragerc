# .coveragerc to control coverage.py
[run]
branch = True
source = dit
omit =
	# don't include tests
	*/tests/*
	# this is just convenience imports
	*/dit/abc.py
	# excluded due to testing difficulty
	*/dit/utils/logger.py
	# exclude hypothesis strategies, because they don't get covered
	*/dit/utils/testing.py
    # don't cover plotting code
    dit/rate_distortion/plotting.py

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    def _repr_html_
    if self\.debug

    # Don't worry about deprecated code:
    @removals.remove

    # don't worry about abstract code:
    @abstractmethod

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

    # ignore fixtures
    def setup_module
    def teardown_module

    # ignore missing import
    #except ImportError
    #raise ImportError

    # runtime errors
    except RuntimeError

    # hard to test (potentially long running)

ignore_errors = True

[html]
directory = coverage_html_report
